const { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes } = require('discord.js');
const fs = require('fs');
const path = require('path');

// Charger la configuration
const projectRoot = path.resolve(__dirname, '..');
const configPath = path.join(projectRoot, 'config', 'config.json');
const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

const TOKEN = config.discord.token;

// Cr√©er le client Discord
const client = new Client({ 
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ] 
});

// D√©finir EXACTEMENT les m√™mes commandes que dans bot.js
const commands = [
    new SlashCommandBuilder()
        .setName('mfa')
        .setDescription('Lance une session de cr√©ation MFA ouverte √† tous (Admin uniquement)'),
    
    new SlashCommandBuilder()
        .setName('start-mfa')
        .setDescription('D√©marre ton onboarding My Full Agency personnel (Admin uniquement)'),
    
    new SlashCommandBuilder()
        .setName('mfa-list')
        .setDescription('Affiche la liste de tous les comptes MFA cr√©√©s'),
    
    new SlashCommandBuilder()
        .setName('voc')
        .setDescription('Envoie un message pour rejoindre le vocal'),
    
    new SlashCommandBuilder()
        .setName('end')
        .setDescription('Cl√¥ture une demande et confirme qu\'un agent a r√©pondu'),
    
    new SlashCommandBuilder()
        .setName('supptoken')
        .setDescription('Supprime un token MFA de la m√©moire du bot')
        .addStringOption(option =>
            option.setName('token')
                .setDescription('Le token √† supprimer (optionnel, laisse vide pour supprimer ton propre token)')
                .setRequired(false)),
    
    new SlashCommandBuilder()
        .setName('carte')
        .setDescription('G√©n√®re ta carte MFA dynamique avec QR code'),
    
    new SlashCommandBuilder()
        .setName('wait')
        .setDescription('Informe qu\'un agent va bient√¥t r√©pondre'),
    
    new SlashCommandBuilder()
        .setName('infos')
        .setDescription('Affiche les informations de ton compte MFA')
];

client.once('ready', async () => {
    console.log(`\n‚úÖ Bot connect√© en tant que ${client.user.tag}`);
    console.log(`üÜî Bot ID: ${client.user.id}`);
    console.log(`üìä Nombre de serveurs: ${client.guilds.cache.size}\n`);
    
    try {
        console.log('üîß R√âINITIALISATION COMPL√àTE DES COMMANDES DISCORD...\n');
        
        // Cr√©er une instance REST pour les commandes globales
        const rest = new REST({ version: '10' }).setToken(TOKEN);
        
        // √âTAPE 1 : Supprimer TOUTES les commandes globales
        console.log('üóëÔ∏è  Suppression des commandes globales...');
        try {
            await rest.put(Routes.applicationCommands(client.user.id), { body: [] });
            console.log('‚úÖ Commandes globales supprim√©es\n');
        } catch (error) {
            console.log('‚ö†Ô∏è  Pas de commandes globales √† supprimer\n');
        }
        
        // √âTAPE 2 : Pour chaque serveur
        for (const guild of client.guilds.cache.values()) {
            console.log(`\nüìã Traitement du serveur: ${guild.name} (${guild.id})`);
            
            try {
                // Supprimer toutes les commandes du serveur
                console.log('  üóëÔ∏è  Suppression des anciennes commandes...');
                await guild.commands.set([]);
                
                // Attendre que Discord synchronise
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // Enregistrer les nouvelles commandes
                console.log('  üìù Enregistrement des nouvelles commandes...');
                await guild.commands.set(commands);
                
                // Attendre encore un peu
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // V√©rifier que les commandes sont bien enregistr√©es
                const registeredCommands = await guild.commands.fetch();
                console.log(`  ‚úÖ ${registeredCommands.size} commandes enregistr√©es :`);
                
                registeredCommands.forEach(cmd => {
                    console.log(`     ‚Ä¢ /${cmd.name} - ${cmd.description}`);
                });
                
            } catch (error) {
                console.error(`  ‚ùå Erreur sur ${guild.name}:`, error.message);
                
                // Si erreur de permissions
                if (error.message.includes('Missing Access')) {
                    console.log('  ‚ö†Ô∏è  Le bot n\'a pas les permissions n√©cessaires sur ce serveur');
                    console.log('  üí° R√©invitez le bot avec les permissions "applications.commands"');
                }
            }
        }
        
        console.log('\n' + '='.repeat(60));
        console.log('üéâ R√âINITIALISATION TERMIN√âE !');
        console.log('='.repeat(60) + '\n');
        
        console.log('üìå IMPORTANT - Que faire maintenant :\n');
        console.log('1Ô∏è‚É£  Fermez compl√®tement Discord (pas juste la fen√™tre)');
        console.log('2Ô∏è‚É£  Rouvrez Discord');
        console.log('3Ô∏è‚É£  Allez dans un salon texte');
        console.log('4Ô∏è‚É£  Tapez / et attendez quelques secondes');
        console.log('5Ô∏è‚É£  Les commandes devraient appara√Ætre !\n');
        
        console.log('‚ö†Ô∏è  Si les commandes n\'apparaissent toujours pas :');
        console.log('   ‚Ä¢ V√©rifiez que le bot a la permission "Utiliser les commandes slash"');
        console.log('   ‚Ä¢ Essayez dans un autre salon');
        console.log('   ‚Ä¢ Attendez jusqu\'√† 1 heure (cache Discord)\n');
        
    } catch (error) {
        console.error('‚ùå Erreur critique:', error);
    }
    
    // Attendre 15 secondes puis quitter
    setTimeout(() => {
        console.log('üëã Fermeture du script de r√©paration...\n');
        process.exit(0);
    }, 15000);
});

// Gestion des erreurs
client.on('error', error => {
    console.error('‚ùå Erreur Discord:', error);
});

process.on('unhandledRejection', error => {
    console.error('‚ùå Erreur non g√©r√©e:', error);
});

// Connexion
console.log('üöÄ D√©marrage du script de r√©paration des commandes Discord...');
client.login(TOKEN).catch(error => {
    console.error('‚ùå Impossible de se connecter √† Discord:', error.message);
    process.exit(1);
});