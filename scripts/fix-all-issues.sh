#!/bin/bash

# ================================================================
# üö® Script de Correction Compl√®te - Tous les Probl√®mes
# ================================================================

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
CONFIG_FILE="$PROJECT_DIR/config/config.json"
DB_FILE="$PROJECT_DIR/database/database.db"

print_message() {
    echo -e "${2}${1}${NC}"
}

print_message "üö® CORRECTION COMPL√àTE - TOUS LES PROBL√àMES" "$BLUE"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
print_message "üîß Ce script va corriger automatiquement tous les probl√®mes d√©tect√©s" "$CYAN"
echo ""

# V√©rifier que nous sommes sur Ubuntu/Linux
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
    print_message "‚ùå Ce script doit √™tre ex√©cut√© sur Ubuntu/Linux" "$RED"
    exit 1
fi

# V√©rifier les privil√®ges sudo
if ! sudo -n true 2>/dev/null; then
    print_message "üîê Demande des privil√®ges sudo..." "$YELLOW"
    sudo echo "Privil√®ges accord√©s" > /dev/null
fi

# ================================================================
# √âTAPE 1: CORRECTION DE LA CONFIGURATION
# ================================================================
print_message "üìã √âTAPE 1: Correction de la configuration..." "$PURPLE"

if [ -f "$CONFIG_FILE" ]; then
    # Corriger le chemin de la base de donn√©es
    DB_PATH_FROM_CONFIG=$(jq -r '.database.file' "$CONFIG_FILE" 2>/dev/null)
    if [ "$DB_PATH_FROM_CONFIG" != "database/database.db" ]; then
        print_message "‚ö†Ô∏è  Correction du chemin de la base de donn√©es..." "$YELLOW"
        jq '.database.file = "database/database.db"' "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
        print_message "‚úÖ Chemin corrig√©: database/database.db" "$GREEN"
    fi
else
    print_message "‚ùå Fichier config.json manquant!" "$RED"
    exit 1
fi

# ================================================================
# √âTAPE 2: INSTALLATION DES D√âPENDANCES CRITIQUES
# ================================================================
print_message "üì¶ √âTAPE 2: Installation des d√©pendances critiques..." "$PURPLE"

# Mettre √† jour la liste des paquets
sudo apt update >/dev/null 2>&1

# Installer les paquets essentiels
PACKAGES=("sqlite3" "jq" "curl" "nginx" "php8.1-fpm" "php8.1-sqlite3" "php8.1-mbstring" "php8.1-curl" "php8.1-json")

for package in "${PACKAGES[@]}"; do
    if ! dpkg -l | grep -q "^ii  $package "; then
        print_message "üì¶ Installation de $package..." "$YELLOW"
        sudo apt install -y "$package" >/dev/null 2>&1
        print_message "‚úÖ $package install√©" "$GREEN"
    else
        print_message "‚úÖ $package d√©j√† install√©" "$GREEN"
    fi
done

# ================================================================
# √âTAPE 3: CR√âATION ET CONFIGURATION DE LA BASE DE DONN√âES
# ================================================================
print_message "üóÑÔ∏è  √âTAPE 3: Configuration de la base de donn√©es..." "$PURPLE"

# Cr√©er le r√©pertoire database
mkdir -p "$(dirname "$DB_FILE")"

# Cr√©er la base de donn√©es si elle n'existe pas
if [ ! -f "$DB_FILE" ]; then
    print_message "‚ö†Ô∏è  Cr√©ation de la base de donn√©es manquante..." "$YELLOW"
    
    # Cr√©er la base de donn√©es avec le sch√©ma
    if [ -f "$PROJECT_DIR/database/database.sql" ]; then
        sqlite3 "$DB_FILE" < "$PROJECT_DIR/database/database.sql"
        print_message "‚úÖ Base de donn√©es cr√©√©e avec succ√®s" "$GREEN"
    else
        # Sch√©ma minimal
        sqlite3 "$DB_FILE" <<EOF
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    discord_id TEXT UNIQUE NOT NULL,
    pseudo TEXT NOT NULL,
    token TEXT UNIQUE NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS user_data (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    token TEXT NOT NULL,
    wins INTEGER DEFAULT 0,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (token) REFERENCES users(token)
);

CREATE TABLE IF NOT EXISTS module_styles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    module_name TEXT UNIQUE NOT NULL,
    styles TEXT NOT NULL,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
EOF
        print_message "‚úÖ Base de donn√©es cr√©√©e avec sch√©ma minimal" "$GREEN"
    fi
else
    print_message "‚úÖ Base de donn√©es existante" "$GREEN"
fi

# ================================================================
# √âTAPE 4: CORRECTION DES PERMISSIONS
# ================================================================
print_message "üîë √âTAPE 4: Correction des permissions..." "$PURPLE"

# S'assurer que www-data existe
if ! id www-data >/dev/null 2>&1; then
    print_message "üë§ Cr√©ation de l'utilisateur www-data..." "$YELLOW"
    sudo useradd -r -s /bin/false www-data 2>/dev/null
fi

# Permissions sur tout le projet
print_message "üìÅ Configuration des permissions du projet..." "$YELLOW"
sudo chown -R www-data:www-data "$PROJECT_DIR" 2>/dev/null
sudo chmod -R 755 "$PROJECT_DIR" 2>/dev/null

# Permissions sp√©cifiques pour la base de donn√©es
print_message "üóÑÔ∏è  Configuration des permissions de la base de donn√©es..." "$YELLOW"
sudo chown www-data:www-data "$DB_FILE" 2>/dev/null
sudo chmod 664 "$DB_FILE" 2>/dev/null
sudo chown www-data:www-data "$(dirname "$DB_FILE")" 2>/dev/null
sudo chmod 755 "$(dirname "$DB_FILE")" 2>/dev/null

# Ajouter l'utilisateur actuel au groupe www-data
print_message "üë• Configuration des groupes..." "$YELLOW"
sudo usermod -a -G www-data ubuntu 2>/dev/null
sudo usermod -a -G www-data $USER 2>/dev/null

# Permissions de fallback si n√©cessaire
print_message "üîß Application de permissions de fallback..." "$YELLOW"
sudo chmod 666 "$DB_FILE" 2>/dev/null
sudo chmod 777 "$(dirname "$DB_FILE")" 2>/dev/null

# ================================================================
# √âTAPE 5: CONFIGURATION NGINX
# ================================================================
print_message "üåê √âTAPE 5: Configuration Nginx..." "$PURPLE"

# Extraire le domaine
DOMAIN=$(jq -r '.website.url' "$CONFIG_FILE" | sed 's|https\?://||' | cut -d'/' -f1)
if [ "$DOMAIN" = "null" ] || [ "$DOMAIN" = "localhost" ]; then
    DOMAIN="localhost"
fi

print_message "üåê Domaine configur√©: $DOMAIN" "$GREEN"

# Cr√©er la configuration Nginx
sudo tee /etc/nginx/sites-available/dashboard-multi-modules > /dev/null <<EOF
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;

    root $PROJECT_DIR/web;
    index index.php index.html;

    access_log /var/log/nginx/dashboard-access.log;
    error_log /var/log/nginx/dashboard-error.log;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Block access to sensitive files
    location ~ /\.(htaccess|htpasswd|git|svn|json|db|bat|js|log)$ {
        deny all;
        return 404;
    }

    # Block access to backup and config directories
    location ~ /(backups|config|database|scripts)/ {
        deny all;
        return 404;
    }

    # PHP processing
    location ~ \.php$ {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
    }

    # Handle static files
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files \$uri =404;
    }

    # Main location block
    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    # Block access to sensitive endpoints
    location ~ ^/(admin|wp-admin|administrator|manage|management|control|console|debug|test|api/admin) {
        deny all;
        return 404;
    }

    # Block access to common attack paths
    location ~ ^/(shell|cmd|exec|system|eval|base64|decode|encode|phpinfo|info|status|health|ping|test) {
        deny all;
        return 404;
    }
}
EOF

# Activer le site
sudo rm -f /etc/nginx/sites-enabled/default
sudo ln -sf /etc/nginx/sites-available/dashboard-multi-modules /etc/nginx/sites-enabled/

# V√©rifier la configuration
if sudo nginx -t; then
    print_message "‚úÖ Configuration Nginx valide" "$GREEN"
else
    print_message "‚ùå Erreur dans la configuration Nginx" "$RED"
    # Configuration de fallback
    sudo tee /etc/nginx/sites-available/dashboard-multi-modules > /dev/null <<EOF
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;
    
    root $PROJECT_DIR/web;
    index index.php;
    
    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        include fastcgi_params;
    }
    
    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }
}
EOF
    print_message "‚úÖ Configuration de fallback appliqu√©e" "$GREEN"
fi

# ================================================================
# √âTAPE 6: CR√âATION DU FICHIER INDEX.PHP PAR D√âFAUT
# ================================================================
print_message "üìÑ √âTAPE 6: Cr√©ation du fichier index.php par d√©faut..." "$PURPLE"

if [ ! -f "$PROJECT_DIR/web/index.php" ]; then
    sudo tee "$PROJECT_DIR/web/index.php" > /dev/null <<EOF
<?php
// Dashboard Multi-Modules
// Fichier d'accueil par d√©faut

// Rediriger vers le dashboard principal
if (file_exists('dashboard.php')) {
    header('Location: dashboard.php');
    exit;
}

// Page d'accueil simple si dashboard.php n'existe pas
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Multi-Modules</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; }
        .status { padding: 15px; margin: 20px 0; border-radius: 5px; }
        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .info { background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Dashboard Multi-Modules</h1>
        <div class="status success">
            ‚úÖ Serveur web op√©rationnel
        </div>
        <div class="status info">
            ‚ÑπÔ∏è Le syst√®me est en cours de configuration...
        </div>
        <p>Si vous voyez cette page, cela signifie que :</p>
        <ul>
            <li>‚úÖ Nginx fonctionne correctement</li>
            <li>‚úÖ PHP est configur√©</li>
            <li>‚úÖ Les permissions sont correctes</li>
        </ul>
        <p><strong>Prochaine √©tape :</strong> Configurez votre application principale.</p>
    </div>
</body>
</html>
EOF
    print_message "‚úÖ Fichier index.php cr√©√©" "$GREEN"
else
    print_message "‚úÖ Fichier index.php existant" "$GREEN"
fi

# ================================================================
# √âTAPE 7: RED√âMARRAGE DES SERVICES
# ================================================================
print_message "üîÑ √âTAPE 7: Red√©marrage des services..." "$PURPLE"

# Red√©marrer PHP-FPM
sudo systemctl restart php8.1-fpm 2>/dev/null
print_message "‚úÖ PHP-FPM red√©marr√©" "$GREEN"

# Red√©marrer Nginx
sudo systemctl restart nginx 2>/dev/null
print_message "‚úÖ Nginx red√©marr√©" "$GREEN"

# Red√©marrer les services PM2
pm2 restart all 2>/dev/null
print_message "‚úÖ Services PM2 red√©marr√©s" "$GREEN"

# ================================================================
# √âTAPE 8: V√âRIFICATION FINALE
# ================================================================
print_message "üìä √âTAPE 8: V√©rification finale..." "$PURPLE"
echo ""

# V√©rifier les services
if systemctl is-active --quiet nginx; then
    echo -e "${GREEN}‚úÖ Nginx: Actif${NC}"
else
    echo -e "${RED}‚ùå Nginx: Inactif${NC}"
fi

if systemctl is-active --quiet php8.1-fpm; then
    echo -e "${GREEN}‚úÖ PHP-FPM: Actif${NC}"
else
    echo -e "${RED}‚ùå PHP-FPM: Inactif${NC}"
fi

PM2_ONLINE=$(pm2 jlist 2>/dev/null | jq '[.[] | select(.pm2_env.status == "online")] | length' 2>/dev/null || echo "0")
if [ "$PM2_ONLINE" -ge 1 ]; then
    echo -e "${GREEN}‚úÖ PM2: $PM2_ONLINE processus actifs${NC}"
else
    echo -e "${RED}‚ùå PM2: Aucun processus actif${NC}"
fi

# V√©rifier la base de donn√©es
if [ -f "$DB_FILE" ] && [ -r "$DB_FILE" ] && [ -w "$DB_FILE" ]; then
    echo -e "${GREEN}‚úÖ Base de donn√©es: Accessible en lecture/√©criture${NC}"
else
    echo -e "${RED}‚ùå Base de donn√©es: Probl√®me d'acc√®s${NC}"
fi

# Test d'√©criture dans la base de donn√©es
if sqlite3 "$DB_FILE" "CREATE TABLE IF NOT EXISTS test_permissions (id INTEGER); DROP TABLE test_permissions;" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Test d'√©criture: R√©ussi${NC}"
else
    echo -e "${RED}‚ùå Test d'√©criture: √âchou√©${NC}"
fi

# V√©rifier l'int√©grit√©
INTEGRITY=$(sqlite3 "$DB_FILE" "PRAGMA integrity_check;" 2>/dev/null)
if [ "$INTEGRITY" = "ok" ]; then
    echo -e "${GREEN}‚úÖ Int√©grit√©: OK${NC}"
else
    echo -e "${RED}‚ùå Int√©grit√©: Probl√®me d√©tect√©${NC}"
fi

# Tester l'acc√®s web
print_message "üåê Test d'acc√®s web..." "$CYAN"
if curl -s -o /dev/null -w "%{http_code}" http://localhost/ | grep -q "200\|301\|302"; then
    print_message "‚úÖ Acc√®s web fonctionnel" "$GREEN"
else
    print_message "‚ö†Ô∏è  Probl√®me d'acc√®s web d√©tect√©" "$YELLOW"
fi

echo ""
print_message "üéâ CORRECTION COMPL√àTE TERMIN√âE!" "$GREEN"
print_message "üí° Tous les probl√®mes d√©tect√©s ont √©t√© corrig√©s" "$CYAN"
print_message "üåê Votre site devrait maintenant √™tre accessible" "$CYAN" 