#!/bin/bash

# ================================================================
# üîç Script de V√©rification de Configuration Ubuntu
# ================================================================

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë     üîç V√©rification de la Configuration Ubuntu               ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Compteurs
ERRORS=0
WARNINGS=0

# Fonction de v√©rification
check() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ${NC} $2"
    else
        echo -e "${RED}‚ùå${NC} $2"
        ((ERRORS++))
    fi
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
    ((WARNINGS++))
}

echo "üìÅ V√©rification des fichiers essentiels..."
echo "==========================================="

# V√©rifier les scripts principaux
[ -f "scripts/ubuntu-manager.sh" ] && check 0 "ubuntu-manager.sh pr√©sent" || check 1 "ubuntu-manager.sh manquant"
[ -f "scripts/auto-update-ubuntu.js" ] && check 0 "auto-update-ubuntu.js pr√©sent" || check 1 "auto-update-ubuntu.js manquant"
[ -f "scripts/migrate-db.js" ] && check 0 "migrate-db.js pr√©sent" || check 1 "migrate-db.js manquant"

# V√©rifier la documentation
[ -f "docs/UBUNTU_DEPLOYMENT_GUIDE.md" ] && check 0 "Guide Ubuntu pr√©sent" || check 1 "Guide Ubuntu manquant"
[ -f "migrations/README.md" ] && check 0 "Guide migrations pr√©sent" || check 1 "Guide migrations manquant"

# V√©rifier les exemples
[ -f "config/config.example.json" ] && check 0 "config.example.json pr√©sent" || check 1 "config.example.json manquant"

echo ""
echo "üîß V√©rification de la configuration..."
echo "======================================"

# V√©rifier si config.json existe pour afficher le domaine
if [ -f "config/config.json" ]; then
    DOMAIN=$(grep -o '"url"[[:space:]]*:[[:space:]]*"[^"]*"' config/config.json | cut -d'"' -f4 | sed 's|https\?://||' | cut -d'/' -f1)
    if [ ! -z "$DOMAIN" ]; then
        check 0 "Domaine configur√©: $DOMAIN"
    else
        warn "Domaine non configur√© dans config.json"
    fi
else
    warn "config/config.json n'existe pas (sera cr√©√© sur le serveur)"
fi

echo ""
echo "üìÇ Structure des dossiers..."
echo "============================"

# V√©rifier les dossiers importants
[ -d "web" ] && check 0 "Dossier web/ pr√©sent" || check 1 "Dossier web/ manquant"
[ -d "bot" ] && check 0 "Dossier bot/ pr√©sent" || check 1 "Dossier bot/ manquant"
[ -d "scripts" ] && check 0 "Dossier scripts/ pr√©sent" || check 1 "Dossier scripts/ manquant"
[ -d "docs" ] && check 0 "Dossier docs/ pr√©sent" || check 1 "Dossier docs/ manquant"

echo ""
echo "üîê V√©rification des permissions..."
echo "=================================="

# V√©rifier que les scripts sont ex√©cutables
if [ -f "scripts/ubuntu-manager.sh" ]; then
    [ -x "scripts/ubuntu-manager.sh" ] && check 0 "ubuntu-manager.sh ex√©cutable" || warn "ubuntu-manager.sh non ex√©cutable (sera corrig√© sur le serveur)"
fi

echo ""
echo "üìù V√©rification Git..."
echo "======================"

# V√©rifier le status git
if command -v git &> /dev/null; then
    MODIFIED=$(git status --porcelain | wc -l)
    if [ $MODIFIED -gt 0 ]; then
        warn "$MODIFIED fichiers modifi√©s non commit√©s"
        echo "  Utilisez: git add . && git commit -m 'message' && git push"
    else
        check 0 "Tous les fichiers sont commit√©s"
    fi
    
    # V√©rifier la branche
    BRANCH=$(git branch --show-current)
    [ "$BRANCH" = "main" ] && check 0 "Sur la branche main" || warn "Sur la branche $BRANCH (pas main)"
else
    warn "Git non install√© localement"
fi

echo ""
echo "üìã R√©sum√©"
echo "========="
echo -e "Erreurs: ${RED}$ERRORS${NC}"
echo -e "Avertissements: ${YELLOW}$WARNINGS${NC}"

if [ $ERRORS -eq 0 ]; then
    echo ""
    echo -e "${GREEN}‚úÖ Tout est pr√™t pour le d√©ploiement Ubuntu !${NC}"
    echo ""
    echo "Prochaines √©tapes:"
    echo "1. git add . && git commit -m 'Ajout syst√®me Ubuntu' && git push"
    echo "2. Sur votre VPS: cd /var/www/dashboard-multi-modules"
    echo "3. git pull"
    echo "4. chmod +x scripts/ubuntu-manager.sh"
    echo "5. ./scripts/ubuntu-manager.sh (Option 1 pour installation compl√®te)"
else
    echo ""
    echo -e "${RED}‚ùå Des erreurs doivent √™tre corrig√©es avant le d√©ploiement${NC}"
fi 